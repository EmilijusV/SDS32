Description: Networking architecture

Parameters:
  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/22"
  PubSubnetACidr:
    Type: String
    Default: "10.0.0.0/24"
  StudentName:
    Type: String
    Default: "EV-FB"

Resources:

# VPC
  EVFBVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub "EVFBVPC"

  PubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EVFBVPC
      CidrBlock: !Ref PubSubnetACidr
      AvailabilityZone: "eu-west-2a"
      Tags:
        - Key: Name
          Value: !Sub "EV-FB-pub-subnet-A"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "EV-FB-igw"


  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EVFBVPC
      InternetGatewayId: !Ref InternetGateway

  PubRouteA:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "EV-FB-RouteTable-Pub-A"
      VpcId: !Ref EVFBVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
        RouteTableId: !Ref PubRouteA
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

  PubSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteA
      SubnetId: !Ref PubSubnetA

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "MySecurityGroup"
      GroupDescription: "Security group for MyEC2Instance"
      VpcId: !Ref EVFBVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "udp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "udp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"

# EC2 instance
  MyEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-0d76271a8a1525c1a"
      InstanceType: "t2.micro"
      SubnetId: !Ref PubSubnetA 
      SecurityGroupIds:
        - !Ref MySecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        # This script is injected into the AWS vm on creation
        # and can be used to provision your VM
        # NB it's run as root, so no need for sudo

        # debug logs are here
        readonly logName="/var/log/server-setup.log"

        echo "Starting $(date)" | tee -a "${logName}"

        echo "Install required tools" | tee -a "${logName}"
        yum install -y \
            docker \
            iptraf-ng \
            htop \
            tmux \
            vim \
            curl \
            git

        #echo "Hello, World!" > index.html
        #python3 -m http.server 80

        ############################################################
        ## ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ application install commands here ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡

        echo "installing Nodejs using NVM" | tee -a "${logName}"
        curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
        yum -y install nodejs

        echo "installing application" | tee -a "${logName}"
        (cd /home/ec2-user && git clone https://github.com/EmilijusV/SDS2.git)

        echo "installing deps and starting application $(date)" | tee -a "${logName}"
        (cd /home/ec2-user/01-notebook && npm install && DEBUG=* PORT=80 npm start)


  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref MyEC2Instance

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  MyEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MyEC2Instance
      AllocationId: !GetAtt MyEIP.AllocationId
      NetworkInterfaceId: !Ref MyEC2InstanceNetworkInterface
    